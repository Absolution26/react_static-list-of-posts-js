{"version":3,"sources":["components/UserInfo/UserInfo.jsx","components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["UserInfo","user","name","email","className","href","CommentInfo","comment","body","CommentList","comments","length","map","commentItem","id","PostInfo","post","title","PostList","posts","postsWithUserAndComment","postsFromServer","userId","usersFromServer","find","commentId","commentsFromServer","filter","postId","App","ReactDOM","render","document","getElementById"],"mappings":"m08IAEaA,EAAW,SAAC,GAAD,QAAGC,KAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,MAAjB,OACtB,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,GAAxC,SACGD,KCJQI,G,MAAc,SAAC,GAAD,QAAGC,QAAWL,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,MAAOK,EAA3B,EAA2BA,KAA3B,OACzB,qBAAIJ,UAAU,cAAd,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SACGF,IAGF,OAED,mBACEE,UAAU,qBACVC,KAAI,iBAAYF,GAFlB,SAIGA,OAIL,qBAAKC,UAAU,oBAAf,SACGI,SCfMC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzBA,EAASC,OAAS,EAEd,oBAAIP,UAAU,cAAd,SACGM,EAASE,KAAI,SAAAC,GAAW,OACvB,cAAC,EAAD,CAAaN,QAASM,GAAkBA,EAAYC,SAKxD,qCACE,uBACA,mBAAG,UAAQ,oBAAX,kCCQKC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,sBAAKZ,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SACGY,EAAKC,QAGR,8BACG,eAEAD,EAAKf,MAAQ,cAAC,EAAD,CAAUA,KAAMe,EAAKf,aAIvC,mBAAGG,UAAU,iBAAb,SACGY,EAAKR,OAGR,cAAC,EAAD,CAAaE,SAAUM,EAAKN,eCvCnBQ,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,oBAAIf,UAAU,WAAd,SACGe,EAAMP,KAAI,SAAAI,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKF,QAC5B,sB,qBCWV,IAAMM,EAA0BC,EAAgBT,KAAI,SAAAI,GAAI,kCACnDA,GADmD,IAEtDf,MAZmBqB,EAYDN,EAAKM,OAXhBC,EAAgBC,MAAK,SAAAvB,GAAI,OAAIA,EAAKa,KAAOQ,MAC7C,MAWHZ,UARuBe,EAQGT,EAAKF,GAPxBY,EACJC,QAAO,SAAApB,GAAO,OAAIA,EAAQqB,SAAWH,QAF1C,IAAyBA,EALJH,KAgBRO,EAAM,kBACjB,0BAASzB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCACA,cAAC,EAAD,CAAUe,MAAOC,QCtBrBU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b891e007.chunk.js","sourcesContent":["import './UserInfo.scss';\n\nexport const UserInfo = ({ user: { name, email } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","export const CommentInfo = ({ comment: { name, email, body } }) => (\n  <li className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">\n        {name}\n      </strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${email}`}\n      >\n        {email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {body}\n    </div>\n  </li>\n);\n","import './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  comments.length > 0\n    ? (\n      <ul className=\"CommentList\">\n        {comments.map(commentItem => (\n          <CommentInfo comment={commentItem} key={commentItem.id} />\n        ))}\n      </ul>\n    )\n    : (\n      <>\n        <hr />\n        <b data-cy=\"NoCommentsMessage\">\n          not comments yet\n        </b>\n      </>\n    )\n);\n","import './PostInfo.scss';\n// import commentsFromServer from '../../api/comments.json';\n// import postsFromServer from '../../api/posts.json';\n// import usersFromServer from '../../api/users.json';\nimport { UserInfo } from '../UserInfo';\nimport { CommentList } from '../CommentList';\n\n// function getUserById(userId) {\n//   return usersFromServer.find(user => user.id === userId)\n//   || null;\n// }\n\n// function getCommentById(commentId) {\n//   return commentsFromServer.find(comment => comment.postId === commentId)\n//     || 'not comments yet';\n// }\n\n// const postsWithUserAndComment = postsFromServer.map(post => ({\n//   ...post,\n//   user: getUserById(post.userId),\n//   comment: getCommentById(post.id),\n// }));\n\nexport const PostInfo = ({ post }) => (\n  <div className=\"PostInfo\">\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">\n        {post.title}\n      </h3>\n\n      <p>\n        {' Posted by  '}\n\n        {post.user && <UserInfo user={post.user} />}\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {post.body}\n    </p>\n\n    <CommentList comments={post.comments} />\n  </div>\n);\n","import { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <ul className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    )) || 'not comments yet'}\n  </ul>\n);\n","import './App.scss';\n\nimport { PostList } from './components/PostList';\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nfunction getUserById(userId) {\n  return usersFromServer.find(user => user.id === userId)\n  || null;\n}\n\nfunction getCommentsById(commentId) {\n  return commentsFromServer\n    .filter(comment => comment.postId === commentId);\n}\n\nconst postsWithUserAndComment = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsById(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n    <PostList posts={postsWithUserAndComment} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}